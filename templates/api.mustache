/* tslint:disable */
/* eslint-disable */
{{>licenseInfo}}

import { ConfigurationParameters, defaultConfigurationParameters } from './configuration';
import type { AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
{{#withNodeImports}}
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
{{#multipartFormData}}
import FormData from 'form-data'
{{/multipartFormData}}
{{/withNodeImports}}
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

export namespace {{#npmName}}{{#lambda.titlecase}}{{#lambda.camelcase}}{{npmName}}{{/lambda.camelcase}}{{/lambda.titlecase}}{{/npmName}}{{^npmName}}SDK{{/npmName}} {
    {{#models}}
    {{#model}}{{#isEnum}}{{>modelEnum}}{{/isEnum}}{{#oneOf}}{{#-first}}{{>modelOneOf}}{{/-first}}{{/oneOf}}{{^isEnum}}{{^oneOf}}{{>modelGeneric}}{{/oneOf}}{{/isEnum}}{{/model}}
    {{/models}}

    {{#apiInfo}}{{#apis}}
    {{>apiInner}}
    {{/apis}}{{/apiInfo}}
    export class Client {
    {{#apiInfo}}{{#apis}}{{#operations}}    {{classname}}: {{classname}};
    {{/operations}}{{/apis}}{{/apiInfo}}
        constructor(configurationParams: ConfigurationParameters, axios?: AxiosInstance) {
            const configuration = Object.assign({}, defaultConfigurationParameters, configurationParams);

            if(!axios) axios = globalAxios.create();

    {{#apiInfo}}{{#apis}}{{#operations}}        this.{{classname}} = new {{classname}}(configuration, axios!);
    {{/operations}}{{/apis}}{{/apiInfo}}    };
    }
}